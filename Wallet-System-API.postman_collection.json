{
  "info": {
    "_postman_id": "wallet-system-api-collection",
    "name": "Wallet System API",
    "description": "A comprehensive collection for testing the Wallet System API with all endpoints for wallet management and transactions.",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Health Check",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health",
              "host": ["{{baseUrl}}"],
              "path": ["health"]
            },
            "description": "Check if the API is running and healthy"
          },
          "response": []
        },
        {
          "name": "Detailed Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/health/detailed",
              "host": ["{{baseUrl}}"],
              "path": ["health", "detailed"]
            },
            "description": "Get detailed health information including uptime and memory usage"
          },
          "response": []
        }
      ],
      "description": "Health monitoring endpoints"
    },
    {
      "name": "Wallets",
      "item": [
        {
          "name": "Create Wallet",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"user123\",\n  \"initialBalance\": 100.00,\n  \"currency\": \"USD\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/create-wallet",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "create-wallet"]
            },
            "description": "Create a new wallet for a user with optional initial balance"
          },
          "response": []
        },
        {
          "name": "Get Wallet by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/get-wallet/{{walletId}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "get-wallet", "{{walletId}}"]
            },
            "description": "Retrieve wallet information by wallet ID"
          },
          "response": []
        },
        {
          "name": "Get Wallet by User ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/get-wallet-by-user/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "get-wallet-by-user", "{{userId}}"]
            },
            "description": "Retrieve wallet information by user ID"
          },
          "response": []
        },
        {
          "name": "Get Wallet Balance",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/get-wallet-balance/{{walletId}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "get-wallet-balance", "{{walletId}}"]
            },
            "description": "Get the current balance of a wallet"
          },
          "response": []
        },
        {
          "name": "Deposit Funds",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletId\": \"{{walletId}}\",\n  \"amount\": 50.00,\n  \"description\": \"Salary deposit\",\n  \"currency\": \"USD\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "deposit"]
            },
            "description": "Deposit funds into a wallet with safe concurrency handling"
          },
          "response": []
        },
        {
          "name": "Withdraw Funds",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletId\": \"{{walletId}}\",\n  \"amount\": 25.00,\n  \"description\": \"ATM withdrawal\",\n  \"currency\": \"USD\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/withdraw",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "withdraw"]
            },
            "description": "Withdraw funds from a wallet with overdraw prevention"
          },
          "response": []
        },
        {
          "name": "Update Wallet Status",
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"status\": \"suspended\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/update-wallet-status/{{walletId}}",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "update-wallet-status", "{{walletId}}"]
            },
            "description": "Update wallet status (active, suspended, closed)"
          },
          "response": []
        },
        {
          "name": "Get Wallet Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/get-wallet-stats",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "get-wallet-stats"]
            },
            "description": "Get overall wallet statistics"
          },
          "response": []
        },
        {
          "name": "Get All Wallets",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/get-wallets?page=1&limit=20&status=active&currency=USD",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "get-wallets"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                },
                {
                  "key": "status",
                  "value": "active",
                  "description": "Filter by wallet status"
                },
                {
                  "key": "currency",
                  "value": "USD",
                  "description": "Filter by currency"
                }
              ]
            },
            "description": "Get all wallets with filtering and pagination"
          },
          "response": []
        },
        {
          "name": "Get Wallets by Balance Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/wallets/get-wallets-by-balance-range?minBalance=100&maxBalance=1000&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "get-wallets-by-balance-range"],
              "query": [
                {
                  "key": "minBalance",
                  "value": "100",
                  "description": "Minimum balance"
                },
                {
                  "key": "maxBalance",
                  "value": "1000",
                  "description": "Maximum balance"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get wallets within a specific balance range"
          },
          "response": []
        }
      ],
      "description": "Wallet management endpoints"
    },
    {
      "name": "Transactions",
      "item": [
        {
          "name": "Transfer Funds",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromWalletId\": \"{{walletId}}\",\n  \"toWalletId\": \"{{targetWalletId}}\",\n  \"amount\": 100.00,\n  \"description\": \"Payment for services\",\n  \"currency\": \"USD\",\n  \"transactionId\": \"{{$guid}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/transactions/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "transfer"]
            },
            "description": "Transfer funds between wallets with atomicity and idempotency"
          },
          "response": []
        },
        {
          "name": "Async Transfer",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromWalletId\": \"{{walletId}}\",\n  \"toWalletId\": \"{{targetWalletId}}\",\n  \"amount\": 100.00,\n  \"description\": \"Async payment\",\n  \"currency\": \"USD\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/transactions/transfer-async",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "transfer-async"]
            },
            "description": "Queue a transfer for asynchronous processing"
          },
          "response": []
        },
        {
          "name": "Get Transaction History",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-transaction-history?walletId={{walletId}}&page=1&limit=20&type=transfer&status=completed",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-transaction-history"],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{walletId}}",
                  "description": "Wallet ID to get history for"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                },
                {
                  "key": "type",
                  "value": "transfer",
                  "description": "Filter by transaction type (deposit, withdrawal, transfer)"
                },
                {
                  "key": "status",
                  "value": "completed",
                  "description": "Filter by transaction status (pending, completed, failed, cancelled)"
                },
                {
                  "key": "startDate",
                  "value": "",
                  "description": "Start date filter (ISO format)",
                  "disabled": true
                },
                {
                  "key": "endDate",
                  "value": "",
                  "description": "End date filter (ISO format)",
                  "disabled": true
                }
              ]
            },
            "description": "Get paginated transaction history with filtering options"
          },
          "response": []
        },
        {
          "name": "Get Transaction by ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-transaction/{{transactionId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-transaction", "{{transactionId}}"]
            },
            "description": "Get detailed information about a specific transaction"
          },
          "response": []
        },
        {
          "name": "Get Transaction Statistics",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-transaction-stats/{{walletId}}",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-transaction-stats", "{{walletId}}"]
            },
            "description": "Get transaction statistics for a wallet (totals, fees, etc.)"
          },
          "response": []
        },
        {
          "name": "Get Transactions by Filter",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-transactions-by-filter?walletId={{walletId}}&type=transfer&status=completed&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-transactions-by-filter"],
              "query": [
                {
                  "key": "walletId",
                  "value": "{{walletId}}",
                  "description": "Wallet ID filter"
                },
                {
                  "key": "type",
                  "value": "transfer",
                  "description": "Transaction type filter"
                },
                {
                  "key": "status",
                  "value": "completed",
                  "description": "Transaction status filter"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get transactions with advanced filtering options"
          },
          "response": []
        },
        {
          "name": "Get Failed Transactions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-failed-transactions?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-failed-transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get all failed transactions with pagination"
          },
          "response": []
        },
        {
          "name": "Get Pending Transactions",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-pending-transactions?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-pending-transactions"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get all pending transactions with pagination"
          },
          "response": []
        },
        {
          "name": "Get Transactions by Date Range",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-transactions-by-date-range?startDate=2024-01-01&endDate=2024-12-31&userId=test-user&page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-transactions-by-date-range"],
              "query": [
                {
                  "key": "startDate",
                  "value": "2024-01-01",
                  "description": "Start date (YYYY-MM-DD)"
                },
                {
                  "key": "endDate",
                  "value": "2024-12-31",
                  "description": "End date (YYYY-MM-DD)"
                },
                {
                  "key": "userId",
                  "value": "test-user",
                  "description": "User ID to filter transactions (optional)"
                },
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get transactions within a specific date range, optionally filtered by user ID"
          },
          "response": []
        },
        {
          "name": "Get Transactions by User ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/transactions/get-transactions-by-user/test-user?page=1&limit=20",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "get-transactions-by-user", "test-user"],
              "query": [
                {
                  "key": "page",
                  "value": "1",
                  "description": "Page number for pagination"
                },
                {
                  "key": "limit",
                  "value": "20",
                  "description": "Number of items per page"
                }
              ]
            },
            "description": "Get all transactions for a specific user ID"
          },
          "response": []
        },
        {
          "name": "Create Test Transactions",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"test-user\",\n  \"count\": 5\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/transactions/create-test-transactions",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "create-test-transactions"]
            },
            "description": "Create test transactions for testing purposes"
          },
          "response": []
        }
      ],
      "description": "Transaction management endpoints"
    },
    {
      "name": "Testing Scenarios",
      "item": [
        {
          "name": "Complete Wallet Flow",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// This is a test script that demonstrates a complete wallet flow",
                  "// 1. Create wallet",
                  "// 2. Deposit funds",
                  "// 3. Check balance",
                  "// 4. Withdraw funds",
                  "// 5. Transfer funds",
                  "",
                  "console.log('Starting complete wallet flow test...');",
                  "",
                  "// Test wallet creation",
                  "pm.test('Wallet created successfully', function () {",
                  "    pm.response.to.have.status(200);",
                  "    const response = pm.response.json();",
                  "    pm.expect(response.status).to.be.true;",
                  "    pm.expect(response.data.id).to.be.a('string');",
                  "    pm.expect(response.data.userId).to.eql('test-user');",
                  "    pm.expect(response.data.balance).to.eql(100);",
                  "    ",
                  "    // Store wallet ID for subsequent requests",
                  "    pm.environment.set('walletId', response.data.id);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"userId\": \"test-user\",\n  \"initialBalance\": 100.00,\n  \"currency\": \"USD\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/create-wallet",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "create-wallet"]
            },
            "description": "Test the complete wallet creation and management flow"
          },
          "response": []
        },
        {
          "name": "Concurrent Operations Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"walletId\": \"{{walletId}}\",\n  \"amount\": 10.00,\n  \"description\": \"Concurrent deposit test\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/wallets/deposit",
              "host": ["{{baseUrl}}"],
              "path": ["wallets", "deposit"]
            },
            "description": "Test concurrent deposit operations (run multiple instances)"
          },
          "response": []
        },
        {
          "name": "Idempotency Test",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"fromWalletId\": \"{{walletId}}\",\n  \"toWalletId\": \"{{targetWalletId}}\",\n  \"amount\": 50.00,\n  \"description\": \"Idempotency test\",\n  \"transactionId\": \"test-transaction-123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/transactions/transfer",
              "host": ["{{baseUrl}}"],
              "path": ["transactions", "transfer"]
            },
            "description": "Test idempotency by sending the same transaction multiple times"
          },
          "response": []
        }
      ],
      "description": "Pre-configured test scenarios for validating API functionality"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Pre-request script to set up common headers or variables",
          "console.log('Making request to: ' + pm.request.url);"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Global test script for common validations",
          "pm.test('Response time is less than 2000ms', function () {",
          "    pm.expect(pm.response.responseTime).to.be.below(2000);",
          "});",
          "",
          "pm.test('Response has valid JSON', function () {",
          "    pm.response.to.be.json;",
          "});",
          "",
          "pm.test('Response has standard format', function () {",
          "    const response = pm.response.json();",
          "    pm.expect(response).to.have.property('status');",
          "    pm.expect(response).to.have.property('message');",
          "    pm.expect(response).to.have.property('data');",
          "});"
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "walletId",
      "value": "",
      "type": "string"
    },
    {
      "key": "targetWalletId",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "test-user-123",
      "type": "string"
    },
    {
      "key": "transactionId",
      "value": "",
      "type": "string"
    }
  ]
}
